{"version":3,"sources":["../../src/common/WesttownGameEngine.js"],"names":["WesttownGameEngine","options","Object","assign","screenWidth","screenHeight","playerRadius","flagRadius","wordBlockRadius","megaphoneRadius","padding","physicsEngine","SimplePhysicsEngine","gameEngine","on","gameLogic","bind","serializer","registerClass","Player","Flag","Door","WordBlock","Megaphone","inputData","playerId","player","world","queryObject","instanceType","input","position","y","x","console","log","emote","setTimeout","toString","length","keydown","includes","message","split","megaphone","id","parseInt","isBroadcasting","stepInfo","isReenact","players","queryObjects","flags","wordblocks","room","MAPS","height","width","flag","distance","color","wordblock","character","obj1","obj2","Math","sqrt","TwoVector","addObjectToWorld","info","door","toRoom","fromRoom","radius","wordBlock","GameEngine"],"mappings":"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","sourcesContent":["import {GameEngine, SimplePhysicsEngine, TwoVector} from 'lance-gg';\r\nimport Player from './Player';\r\nimport Flag from './Flag';\r\nimport Door from './Door';\r\nimport WordBlock from './WordBlock';\r\nimport Megaphone from './Megaphone';\r\nimport {MAPS} from './Maps';\r\n\r\nexport default class WesttownGameEngine extends GameEngine {\r\n\r\n    constructor(options) {\r\n        super(options);\r\n\r\n        Object.assign(this, {\r\n            screenWidth: 400, screenHeight: 400, \r\n            playerRadius:16, flagRadius: 20, wordBlockRadius: 32, megaphoneRadius: 16,\r\n            padding: 10\r\n        });\r\n\r\n        this.physicsEngine = new SimplePhysicsEngine({ gameEngine: this });\r\n\r\n        // common code\r\n        this.on('postStep', this.gameLogic.bind(this));\r\n\r\n    }\r\n\r\n    registerClasses(serializer) {\r\n        serializer.registerClass(Player);\r\n        serializer.registerClass(Flag);\r\n        serializer.registerClass(Door);\r\n        serializer.registerClass(WordBlock);\r\n        serializer.registerClass(Megaphone);\r\n    }\r\n\r\n    processInput(inputData, playerId) {\r\n        super.processInput(inputData, playerId);\r\n\r\n        let player = this.world.queryObject({ playerId: playerId, instanceType: Player });\r\n\r\n        // bind arrows to movement\r\n        if (player) {\r\n            if (inputData.input === 'up') {\r\n                player.position.y -= 5;\r\n            } else if (inputData.input === 'down') {\r\n                player.position.y += 5;\r\n            }\r\n\r\n            if (inputData.input === 'left') {\r\n                player.position.x -= 5;\r\n            } else if (inputData.input === 'right') {\r\n                player.position.x += 5;\r\n            }\r\n\r\n            // bind space to boolean character status\r\n            if (inputData.input === 'heart') {\r\n                console.log(\"emote input received\");\r\n                player.emote = \"<3\";\r\n                setTimeout(() => {player.emote = \" \"}, 3000);\r\n            } else if (inputData.input === 'smile') {\r\n                player.emote = \":)\";\r\n                setTimeout(() => {player.emote = \" \"}, 3000);\r\n            } else if (inputData.input === 'frown') {\r\n                player.emote = \":(\";\r\n                setTimeout(() => {player.emote = \" \"}, 3000);\r\n            } \r\n\r\n            if (inputData.input.toString().length == 1) {\r\n                player.keydown = inputData.input;\r\n            } else {\r\n                player.keydown = \" \";\r\n            }\r\n        }\r\n\r\n        if (inputData.input.includes(\"broadcast\")) {\r\n            console.log(\"broadcast input received\");\r\n            console.log(inputData.input);\r\n\r\n            let message = inputData.input.split(\":\");\r\n            let megaphone = this.world.queryObject({id: parseInt(message[1]), instanceType: Megaphone});\r\n\r\n            console.log(megaphone);\r\n\r\n            if (megaphone) {\r\n                console.log(\"broadcasting\");\r\n                megaphone.message = message[2];\r\n                megaphone.isBroadcasting = 1;\r\n\r\n                setTimeout(() => megaphone.isBroadcasting = 0, 10000);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    gameLogic(stepInfo) {\r\n        if (stepInfo.isReenact) return;\r\n\r\n        let players = this.world.queryObjects({ instanceType: Player });\r\n        let flags = this.world.queryObjects({ instanceType: Flag });\r\n        let wordblocks = this.world.queryObjects({ instanceType: WordBlock });\r\n\r\n        if (!players) return;\r\n\r\n        \r\n        //Test boundaries for each character\r\n        for (const player of players) {\r\n            if(!player.room) {\r\n                continue\r\n            };\r\n\r\n            if (player.position.y < this.padding) {\r\n                player.position.y = this.padding;\r\n            } else if (player.position.y > MAPS[player.room].height - this.padding) {\r\n                player.position.y = MAPS[player.room].height - this.padding;\r\n            }\r\n\r\n            if (player.position.x < this.padding) {\r\n                player.position.x = this.padding;\r\n            } else if (player.position.x > MAPS[player.room].width - this.padding) {\r\n                player.position.x = MAPS[player.room].width - this.padding;\r\n            }\r\n            \r\n            if (flags) {\r\n                for (const flag of flags) {\r\n                    if (this.distance(player, flag) <= this.flagRadius) {\r\n                        flag.color = player.color;\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            if (wordblocks) {\r\n                for (const wordblock of wordblocks) {\r\n                    if (this.distance(player, wordblock) <= this.wordBlockRadius && player.keydown != \" \") {\r\n                        wordblock.character = player.keydown;\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    distance(obj1, obj2) {\r\n        return Math.sqrt((obj1.position.x - obj2.position.x)*(obj1.position.x - obj2.position.x) + (obj1.position.y - obj2.position.y)*(obj1.position.y - obj2.position.y));\r\n    }\r\n\r\n\r\n    addPlayer(playerId) {\r\n        let player = new Player(this,null, { playerId, position: new TwoVector(this.screenWidth/2, this.screenHeight/2)});\r\n\r\n        this.addObjectToWorld(player);\r\n        return player;\r\n    }\r\n\r\n    addFlag(info) {\r\n        let flag = new Flag(this,null,{playerId: 0, position: info});\r\n        \r\n        this.addObjectToWorld(flag);\r\n        return flag;\r\n    }\r\n\r\n    addDoor(info) {\r\n        let door = new Door(this,null,{playerId: 0, position: new TwoVector(info.x, info.y)});\r\n        door.toRoom = info.toRoom;\r\n        door.fromRoom = info.fromRoom;\r\n        door.radius = info.radius;\r\n\r\n        this.addObjectToWorld(door);\r\n        return door;\r\n    }\r\n\r\n    addWordBlock(info) {\r\n        let wordBlock = new WordBlock(this, null, {playerId: 0, position: info.position });\r\n        wordBlock.character = info.character;\r\n        \r\n        this.addObjectToWorld(wordBlock);\r\n        return wordBlock;\r\n    }\r\n\r\n    addMegaphone(info) {\r\n        let megaphone = new Megaphone(this, null, {playerId: 0, position: info});\r\n\r\n        this.addObjectToWorld(megaphone);\r\n        return megaphone;\r\n    }\r\n\r\n}\r\n"],"file":"WesttownGameEngine.js"}